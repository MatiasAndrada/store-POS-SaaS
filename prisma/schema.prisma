// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @unique @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  image                 String?
  password              String?
  accounts              Account[]
  sessions              Session[]
  stores                UsersOnStores[]        @relation("userStores")
  currentStoreId        String?
  currentStore          UsersOnStores?         @relation("userCurrentStore", fields: [currentStoreId], references: [id])
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  EmployeeSchedule      EmployeeSchedule[]
}

model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model VerificationToken {
  id      String   @id @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @unique @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Store {
  id            String          @id @unique @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  staff         UsersOnStores[]
  products      Product[]
  sales         Sale[]
  StoreSchedule StoreSchedule[]
}

model StoreSchedule {
  id          String    @id @unique @default(cuid())
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  day         Int // 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 4 = Friday, 5 = Saturday, 6 = Sunday
  firstOpen   DateTime
  firstClose  DateTime
  secondOpen  DateTime?
  secondClose DateTime?

  @@unique([storeId, day]) // avoid duplicate schedules for the same day
}

model UsersOnStores {
  id               String             @id @unique @default(cuid())
  userId           String
  storeId          String
  user             User               @relation("userStores", fields: [userId], references: [id], onDelete: Cascade)
  store            Store              @relation(fields: [storeId], references: [id], onDelete: Cascade)
  currentUsers     User[]             @relation("userCurrentStore")
  role             String
  createdAt        DateTime           @default(now())
  EmployeeSchedule EmployeeSchedule[]
}

model EmployeeSchedule {
  id              String        @id @unique @default(cuid())
  usersOnStoresId String
  usersOnStores   UsersOnStores @relation(fields: [usersOnStoresId], references: [id], onDelete: Cascade)
  day             Int // 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 4 = Friday, 5 = Saturday, 6 = Sunday
  firstOpen       DateTime
  firstClose      DateTime
  secondOpen      DateTime?
  secondClose     DateTime?
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?

  @@unique([usersOnStoresId, day]) // avoid duplicate schedules for the same day
}

enum Visibility {
  show
  hidden
}

enum Role {
  owner
  admin
  seller
}

model Product {
  id         String     @id @unique @default(cuid())
  storeId    String
  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  barcode    String?
  name       String
  price      Int?
  cost       Int?
  stock      Int?
  saleItem   SaleItem[]
  visibility Visibility @default(show)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
}

model Sale {
  id         String     @id @unique @default(cuid())
  storeId    String
  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  total      Int
  items      SaleItem[]
  visibility Visibility @default(show)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
}

model SaleItem {
  id        String  @id @unique @default(cuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
  cost      Int
  total     Int
}
